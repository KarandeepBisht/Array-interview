

class Solution{

    // arr: input array
    // n: size of array
    //Function to find the sum of contiguous subarray with maximum sum.
    long maxSubarraySum(int arr[], int n){
        int max_so_far = arr[0];
    int curr_max = arr[0];

    for (int i = 1; i < n; i++)
    {
           curr_max = Math.max(arr[i], curr_max+arr[i]);
        max_so_far = Math.max(max_so_far, curr_max);
    }
    return max_so_far;
    
        // Your code here
        
    }
    
}



static int maxSubArraySum(int a[],int size)
{
     
    int max_so_far = a[0], max_ending_here = 0;
 
    for (int i = 0; i < size; i++)
    {
        max_ending_here = max_ending_here + a[i];
        if (max_ending_here < 0)
            max_ending_here = 0;
         
        /* Do not compare for all
           elements. Compare only
           when max_ending_here > 0 */
        else if (max_so_far < max_ending_here)
            max_so_far = max_ending_here;
         
    }
    return max_so_far;
}
