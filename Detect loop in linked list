Node slow = head, fast = head;
 
        while (fast != null && fast.next != null)
        {
            // move slow by one
            slow = slow.next;
 
            // move fast by two
            fast = fast.next.next;
 
            // if they meet any node, the linked list contains a cycle
            if (slow == fast) {
                return true;
            }
        }
 
        // we reach here if slow and fast do not meet
        return false;
    }

class Solution {
    //Function to check if the linked list has a loop.
    public static boolean detectLoop(Node head){
        Node curr = head;
        Set<Node> set= new HashSet<>();
        while(curr !=null){
            if(set.contains(curr)){
                return true;
            }
            set.add(curr);
            curr=curr.next;
        }
        return false;
    }
}

