public static int height( Node root){

    //Initialising a variable to count the 
    //height of tree
     int depth = 0;
  
   
    Queue<Node> q=new LinkedList<>();
    
     //Pushing first level element along with null
    q.add(root);
    q.add(null);
    while(!q.isEmpty()){
        Node temp = q.peek();
        q.remove();
      
          //When null encountered, increment the value
        if(temp == null){
            depth++;
        }
          
          //If null not encountered, keep moving
        if(temp != null){
            if(temp.left!=null){
                  q.add(temp.left);
            }
              if(temp.right!=null){
                q.add(temp.right);
            }
        }
      
          //If queue still have elements left,
          //push null again to the queue.
        else if(!q.isEmpty()){
            q.add(null);
        }
    }
    return depth;
}





class Solution {
    //Function to find the height of a binary tree.
    int height(Node node) 
    {
        if(node== null)
        return 0;
        else{
            int lheight= height(node.left);
            int rheight = height(node.right);
            if(lheight > rheight)
            return (lheight + 1);
            else
            return (rheight + 1);
        }
    }
}
